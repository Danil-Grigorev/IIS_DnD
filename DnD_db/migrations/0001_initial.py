# Generated by Django 2.1.2 on 2018-10-28 14:58

import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Adventure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('difficulty', models.IntegerField(default=0)),
                ('purpose', models.TextField(default='New purpose')),
                ('location', models.CharField(default='Some location', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New campaign', max_length=100, unique=True)),
                ('info', models.TextField(default='Campaign info')),
                ('adventures', models.ManyToManyField(to='DnD_db.Adventure')),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New character', max_length=100, unique=True)),
                ('race', models.CharField(
                    choices=[('Hobbit', 'Hobbit'), ('Kuduk', 'Kuduk'), ('Dwarf', 'Dwarf'), ('Elf', 'Elf'),
                             ('Human', 'Human'), ('Barbar', 'Barbar'), ('Kroll', 'Kroll')], default='Human',
                    max_length=6)),
                ('speciality', models.CharField(
                    choices=[('Warrior', 'Warrior'), ('Fighter', 'Fighter'), ('Fencer', 'Fencer'), ('Ranger', 'Ranger'),
                             ('Strider', 'Strider'), ('Druid', 'Druid'), ('Wizard', 'Wizard'), ('Sorcerer', 'Sorcerer'),
                             ('Mage', 'Mage'), ('Alchemist', 'Alchemist'), ('Theurg', 'Theurg'), ('Pyrofor', 'Pyrofor'),
                             ('Thief', 'Thief'), ('Robber', 'Robber'), ('Sicco', 'Sicco')], default='Warrior',
                    max_length=9)),
                ('level', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterDeath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Enemy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New enemy', max_length=100, unique=True)),
                ('type', models.CharField(
                    choices=[('Demon', 'Demon'), ('Dragon', 'Dragon'), ('Snake', 'Snake'), ('Insect', 'Insect'),
                             ('Humanoid', 'Humanoid'), ('Magical', 'Magical'), ('Statues', 'Statues'),
                             ('Creature', 'Creature')], default='Demon', max_length=100)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=100)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                            to='DnD_db.Character')),
            ],
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New map', max_length=100, unique=True)),
                ('description', models.TextField(default='Some description')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(default='new player', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(default='Location for session', max_length=100)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('campaign',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DnD_db.Campaign')),
                ('creator',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='DnD_db.Player')),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='session_part',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                       to='DnD_db.Session'),
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='characterdeath',
            name='place',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='DnD_db.Map'),
        ),
        migrations.AddField(
            model_name='character',
            name='death',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                       to='DnD_db.CharacterDeath'),
        ),
        migrations.AddField(
            model_name='character',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='DnD_db.Player'),
        ),
        migrations.AddField(
            model_name='adventure',
            name='enemies',
            field=models.ManyToManyField(blank=True, to='DnD_db.Enemy'),
        ),
        migrations.AddField(
            model_name='adventure',
            name='map',
            field=models.ManyToManyField(to='DnD_db.Map'),
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('name', 'type')},
        ),
    ]
